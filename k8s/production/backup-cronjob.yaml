apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
    criticality: high
spec:
  # Full backup at 2 AM daily
  schedule: "0 2 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: legislative-monitor
        component: backup
        backup-type: full
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 7200  # 2 hours max
      template:
        metadata:
          labels:
            app: legislative-monitor
            component: backup
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: legislative-monitor/backup:latest
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -e
                echo "Starting full database backup..."
                
                # Run backup script
                python -m core.utils.disaster_recovery backup \
                  --type full \
                  --component database \
                  --verify true
                
                # Check backup status
                if [ $? -eq 0 ]; then
                  echo "Backup completed successfully"
                  # Send success metric
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/database << EOF
                  backup_last_success_timestamp{type="full",component="database"} $(date +%s)
                  backup_status{type="full",component="database"} 1
                EOF
                else
                  echo "Backup failed"
                  # Send failure metric
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/database << EOF
                  backup_last_failure_timestamp{type="full",component="database"} $(date +%s)
                  backup_status{type="full",component="database"} 0
                EOF
                  exit 1
                fi
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: url
            - name: AWS_REGION
              value: "us-east-1"
            - name: BACKUP_S3_BUCKET
              value: "legislative-monitor-backups"
            - name: BACKUP_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-encryption
                  key: key
            resources:
              requests:
                memory: "512Mi"
                cpu: "500m"
              limits:
                memory: "2Gi"
                cpu: "2000m"
            volumeMounts:
            - name: backup-storage
              mountPath: /tmp
          volumes:
          - name: backup-storage
            emptyDir:
              sizeLimit: 10Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup-incremental
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
    criticality: high
spec:
  # Incremental backup every 6 hours
  schedule: "0 */6 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: legislative-monitor
        component: backup
        backup-type: incremental
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 3600  # 1 hour max
      template:
        metadata:
          labels:
            app: legislative-monitor
            component: backup
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: legislative-monitor/backup:latest
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -e
                echo "Starting incremental database backup..."
                
                # Run backup script
                python -m core.utils.disaster_recovery backup \
                  --type incremental \
                  --component database \
                  --verify true
                
                # Check backup status
                if [ $? -eq 0 ]; then
                  echo "Incremental backup completed successfully"
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/database << EOF
                  backup_last_success_timestamp{type="incremental",component="database"} $(date +%s)
                  backup_status{type="incremental",component="database"} 1
                EOF
                else
                  echo "Incremental backup failed"
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/database << EOF
                  backup_last_failure_timestamp{type="incremental",component="database"} $(date +%s)
                  backup_status{type="incremental",component="database"} 0
                EOF
                  exit 1
                fi
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: url
            - name: AWS_REGION
              value: "us-east-1"
            - name: BACKUP_S3_BUCKET
              value: "legislative-monitor-backups"
            - name: BACKUP_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-encryption
                  key: key
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "1Gi"
                cpu: "1000m"
            volumeMounts:
            - name: backup-storage
              mountPath: /tmp
          volumes:
          - name: backup-storage
            emptyDir:
              sizeLimit: 5Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
    criticality: medium
spec:
  # Redis backup every 4 hours
  schedule: "0 */4 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: legislative-monitor
        component: backup
        backup-type: redis
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 1800  # 30 minutes max
      template:
        metadata:
          labels:
            app: legislative-monitor
            component: backup
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: legislative-monitor/backup:latest
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -e
                echo "Starting Redis backup..."
                
                # Run backup script
                python -m core.utils.disaster_recovery backup \
                  --type full \
                  --component redis
                
                # Check backup status
                if [ $? -eq 0 ]; then
                  echo "Redis backup completed successfully"
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/redis << EOF
                  backup_last_success_timestamp{type="full",component="redis"} $(date +%s)
                  backup_status{type="full",component="redis"} 1
                EOF
                else
                  echo "Redis backup failed"
                  curl -X POST http://prometheus-pushgateway:9091/metrics/job/backup/instance/redis << EOF
                  backup_last_failure_timestamp{type="full",component="redis"} $(date +%s)
                  backup_status{type="full",component="redis"} 0
                EOF
                  exit 1
                fi
            env:
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: url
            - name: AWS_REGION
              value: "us-east-1"
            - name: BACKUP_S3_BUCKET
              value: "legislative-monitor-backups"
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "512Mi"
                cpu: "500m"
            volumeMounts:
            - name: backup-storage
              mountPath: /tmp
          volumes:
          - name: backup-storage
            emptyDir:
              sizeLimit: 2Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
    criticality: low
spec:
  # Cleanup old backups daily at 4 AM
  schedule: "0 4 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app: legislative-monitor
        component: backup
        backup-type: cleanup
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 3600  # 1 hour max
      template:
        metadata:
          labels:
            app: legislative-monitor
            component: backup
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: legislative-monitor/backup:latest
            imagePullPolicy: Always
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -e
                echo "Starting backup cleanup..."
                
                # Run cleanup script
                python -m core.utils.disaster_recovery cleanup \
                  --dry-run false
                
                echo "Backup cleanup completed"
            env:
            - name: AWS_REGION
              value: "us-east-1"
            - name: BACKUP_S3_BUCKET
              value: "legislative-monitor-backups"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: backup-role
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["database-credentials", "redis-credentials", "backup-encryption"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-rolebinding
  namespace: production
  labels:
    app: legislative-monitor
    component: backup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: backup-role
subjects:
- kind: ServiceAccount
  name: backup-service-account
  namespace: production