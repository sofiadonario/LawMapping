[pytest]
# Pytest configuration for Monitor Legislativo

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --strict-markers
    --tb=short
    --cov=core
    --cov=web
    --cov=desktop
    --cov-report=html:htmlcov
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    --cov-fail-under=60
    --maxfail=1
    --disable-warnings
    -p no:warnings

# Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may use external resources)
    e2e: End-to-end tests (full system tests)
    slow: Slow tests (>1s execution time)
    security: Security-related tests
    auth: Authentication and authorization tests
    api: API endpoint tests
    ui: User interface tests
    db: Database tests
    external: Tests that require external services

# Coverage
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    setup.py
    */config.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

[coverage:html]
directory = htmlcov

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout
timeout = 300
timeout_method = thread

# Asyncio
asyncio_mode = auto

# Environment
env = 
    TESTING=true
    DATABASE_URL=sqlite:///:memory:
    JWT_SECRET_KEY=test-secret-key
    FLASK_ENV=testing